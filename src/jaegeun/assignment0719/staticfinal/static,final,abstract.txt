<static, final, abstract과 관련된 개념과 특징 간단한 예를 들어 설명>

<Static>
- static은 정적이라는 것을 의미한다.
- static키워드가 붙은 변수 또는 메소드는 클래스가 로딩되는 시점(컴파일 시점)에
  메모리의 static영역에 할당되며 static변수와 메소드는 클래스의 인스턴스를 생성하지 않고도 호출, 접근이 가능하다.

1) static 변수
-> static 변수는 클래스의 모든 인스턴스가 공유하는 변수이고
   프로그램이 실행되고 종료되는 시점까지 생성주기이다.

2) static 메소드
-> static메소드는 객체의 상태에 의존하지 않고 공통된 동작을 수행하는데 사용된다.
   또한 this키워드를 사용할 수 없으며 클래스 이름을 통해 직접 호출이 된다.

--------------------------------------------------------------------------------------------------

<final>
- final은 불변. 즉 변경할 수 없다라는 것을 의미하며 선언된 변수와 메소드, 클래스의 변경을 제한하는 역할이다.
- final은 변수, 메소드, 클래스에 붙을 수 있다.

1) final변수
-> final로 선언된 변수는 변할 수 없는 상수라고 한다.
-> 생성시에 꼭 초기화를 해야하며 생성시에 할당한 값은 변경할 수 없다.

2) final메소드
-> final 메소드는 구현이 되어야 하며 한번 구현된 내용은 변경할 수 없다.
-> final로 선언된 메소드는 하위 클래스에서 오버라이딩을 통해 재정의하는 것이 불가능하다.

3) final클래스
-> final로 선언된 클래스는 다른 클래스에서 final클래스를 상속받을 수 없다.

--------------------------------------------------------------------------------------------------

3. Abstract
- abstract는 추상적인이라는 의미를 가지고 있으며 abstract 메소드를 가진 클래스나
 인터페이스를 상속받는다면 하위 클래스는 그 메소드를 꼭 재정의해야한다.
- abstract는 클래스, 메소드, 인터페이스에 사용된다.

1) abstract 메소드
-> abstract로 선언된 메소드는 선언부만 있고 구현부는 없는 메소드로
   하위 클래스에서 사용하고자 하는 동작으로 반드시 재정의해야하는 메소드이다.

2) abstract 클래스
-> abstract클래스는 완성, 미완성(abstract) 메소드를 함께 가질 수 있는 클래스이다.
-> abstract클래스를 상속받은 자식 클래스는 완성된 메소드는 사용이 가능하나 미완성된 abstract메소드는
   반드시 구현해야 한다.

3) abstract 인터페이스
-> 인터페이스는 abstract클래스와 다르게 미완성된 abstract메소드만 가지고 있는 클래스이다.
-> 인터페이스에서는 모든 메소드가 abstract 메소드이기 때문에 abstract키워드를 사용할 필요는 없다.
-> 인터페이스를 implements한 하위클래스는 인터페이스에 존재하는 모든 메소드를 재정의해야한다.